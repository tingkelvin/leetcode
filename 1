#include <iostream>
#include <algorithm>
#include <vector>
#include <map>

using namespace std;

int maximalNetworkRank(int n, vector<vector<int>>& roads) {
    map<int, vector<int>> roadMap;
    map<int, int> roadSize;
    for(auto& road: roads){
        roadMap[road[0]].push_back(road[1]);
        roadMap[road[1]].push_back(road[0]);
        roadSize[road[0]]++;
        roadSize[road[1]]++;
    }

    auto cmp = [&roadSize] (int a, int b) {
        return roadSize[a] > roadSize[b];
    };

    sort(roadSize.begin(), roadSize.end(), cmp);

    for(auto& i : roadSize){
        cout << i.first << " " << i.second << endl;
    }
    int maxRank = 0;


    return -1;
}


int main() {
    int n = 4;
    vector<vector<int>> roads = {{0,1},{0,3},{1,2},{1,3}};
    cout << maximalNetworkRank(n, roads) << endl;
    //
    // n = 5;
    // roads = {{0,1},{0,3},{1,2},{1,3},{2,3},{2,4}};
    // cout << maximalNetworkRank(n, roads) << endl;
    //
    // n = 8;
    // roads = {{0,1},{1,2},{2,3},{2,4},{5,6},{5,7}};
    // cout << maximalNetworkRank(n, roads) << endl;
    //
    // n = 8;
    // roads = {{0,1},{1,2},{2,3},{2,4},{5,6},{5,7},{4,5}};
    // cout << maximalNetworkRank(n, roads) << endl;
    //
    // n = 8;
    // roads = {{0,1},{1,2},{2,3},{2,4},{5,6},{5,7},{4,5},{0,4}};
    // cout << maximalNetworkRank(n, roads) << endl;
    // return 0;
}
